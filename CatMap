import cv2
import numpy as np
import matplotlib.pyplot as plt

def arnold_cat_map(img, iterations):
    N = img.shape[0]
    result = np.copy(img)
    for _ in range(iterations):
        new_img = np.zeros_like(result)
        for x in range(N):
            for y in range(N):
                new_x = (x + y) % N
                new_y = (x + 2 * y) % N
                new_img[new_x, new_y] = result[x, y]
        result = new_img
    return result

def inverse_arnold_cat_map(img, iterations):
    N = img.shape[0]
    result = np.copy(img)
    for _ in range(iterations):
        new_img = np.zeros_like(result)
        for x in range(N):
            for y in range(N):
                new_x = (2*x - y) % N
                new_y = (-x + y) % N
                new_img[new_x, new_y] = result[x, y]
        result = new_img
    return result

def correlation(a, b):
    a_flat = a.flatten().astype(float)
    b_flat = b.flatten().astype(float)
    return np.corrcoef(a_flat, b_flat)[0, 1]

# Carga de imagen
img = cv2.imread('ScorpionCover.jpg', cv2.IMREAD_GRAYSCALE)
img = cv2.resize(img, (255, 255))

# Buscar el número de iteraciones necesarias para recuperar la imagen original
original = np.copy(img)
current = np.copy(img)
min_corr = 1
worst_img = None
worst_iter = 0

for i in range(1, 300):
    current = arnold_cat_map(current, 1)
    corr = correlation(original, current)

    if corr < min_corr:
        min_corr = corr
        worst_img = np.copy(current)
        worst_iter = i

    if np.array_equal(current, original):
        period = i
        break

recovered = inverse_arnold_cat_map(current, period)

# Mostrar resultados
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.title("Original")
plt.imshow(original, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title(f"Recuperada ({period} it.)")
plt.imshow(recovered, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title(f"Menor correlación ({worst_iter} it.)")
plt.imshow(worst_img, cmap='gray')
plt.axis('off')

plt.tight_layout()
plt.show()

print(f"\nNúmero de iteraciones para recuperar: {period}")
print(f"Iteración con menor correlación: {worst_iter} (correlación = {min_corr:.2f})")
